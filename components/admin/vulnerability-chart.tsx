"use client"

import { useEffect, useRef } from "react"

interface VulnerabilityChartProps {
  severityCounts: {
    critical: number
    high: number
    medium: number
    low: number
  }
}

export default function VulnerabilityChart({ severityCounts }: VulnerabilityChartProps) {
  const canvasRef = useRef<HTMLCanvasElement>(null)

  useEffect(() => {
    if (!canvasRef.current) return

    const canvas = canvasRef.current
    const ctx = canvas.getContext("2d")
    if (!ctx) return

    // Clear canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height)

    // Data for the chart
    const data = [
      { label: "Critical", value: severityCounts.critical, color: "#dc2626" },
      { label: "High", value: severityCounts.high, color: "#f97316" },
      { label: "Medium", value: severityCounts.medium, color: "#eab308" },
      { label: "Low", value: severityCounts.low, color: "#3b82f6" },
    ]

    // Calculate total
    const total = data.reduce((sum, item) => sum + item.value, 0)

    // Draw pie chart
    if (total > 0) {
      let startAngle = 0

      data.forEach((item) => {
        const sliceAngle = (2 * Math.PI * item.value) / total

        ctx.beginPath()
        ctx.fillStyle = item.color
        ctx.moveTo(canvas.width / 2, canvas.height / 2)
        ctx.arc(
          canvas.width / 2,
          canvas.height / 2,
          Math.min(canvas.width, canvas.height) / 2 - 10,
          startAngle,
          startAngle + sliceAngle,
        )
        ctx.closePath()
        ctx.fill()

        startAngle += sliceAngle
      })
    } else {
      // Draw empty state
      ctx.beginPath()
      ctx.fillStyle = "#e5e7eb"
      ctx.arc(canvas.width / 2, canvas.height / 2, Math.min(canvas.width, canvas.height) / 2 - 10, 0, 2 * Math.PI)
      ctx.fill()

      // Draw text
      ctx.fillStyle = "#6b7280"
      ctx.font = "14px sans-serif"
      ctx.textAlign = "center"
      ctx.textBaseline = "middle"
      ctx.fillText("No vulnerabilities", canvas.width / 2, canvas.height / 2)
    }
  }, [severityCounts])

  return (
    <div className="space-y-4">
      <div className="text-sm font-medium text-gray-700">Vulnerability Breakdown</div>

      <div className="flex justify-center">
        <canvas ref={canvasRef} width={150} height={150} className="max-w-full" />
      </div>

      <div className="grid grid-cols-2 gap-2 text-xs">
        {Object.entries(severityCounts).map(([severity, count]) => (
          <div key={severity} className="flex items-center space-x-2">
            <div
              className="w-3 h-3 rounded-full"
              style={{
                backgroundColor:
                  severity === "critical"
                    ? "#dc2626"
                    : severity === "high"
                      ? "#f97316"
                      : severity === "medium"
                        ? "#eab308"
                        : "#3b82f6",
              }}
            />
            <div className="capitalize">
              {severity}: {count}
            </div>
          </div>
        ))}
      </div>
    </div>
  )
}
