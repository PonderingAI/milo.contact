"use client"

import { AlertTriangle, AlertCircle, Info, CheckCircle } from "lucide-react"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog"

interface VulnerabilityDetailsProps {
  isOpen: boolean
  onClose: () => void
  vulnerability: any
  packageName: string
  currentVersion: string
  latestVersion: string
}

export function VulnerabilityDetails({
  isOpen,
  onClose,
  vulnerability,
  packageName,
  currentVersion,
  latestVersion,
}: VulnerabilityDetailsProps) {
  if (!vulnerability) return null

  // Get the primary vulnerability info (first in the via array)
  const primaryVuln = Array.isArray(vulnerability.via) ? vulnerability.via[0] : vulnerability.via

  // Determine severity color and icon
  const getSeverityInfo = (severity: string) => {
    switch (severity.toLowerCase()) {
      case "critical":
        return { color: "text-red-500", bgColor: "bg-red-900/20", icon: <AlertCircle className="h-5 w-5" /> }
      case "high":
        return { color: "text-orange-500", bgColor: "bg-orange-900/20", icon: <AlertTriangle className="h-5 w-5" /> }
      case "moderate":
      case "medium":
        return { color: "text-yellow-500", bgColor: "bg-yellow-900/20", icon: <AlertTriangle className="h-5 w-5" /> }
      case "low":
        return { color: "text-blue-500", bgColor: "bg-blue-900/20", icon: <Info className="h-5 w-5" /> }
      default:
        return { color: "text-gray-500", bgColor: "bg-gray-900/20", icon: <Info className="h-5 w-5" /> }
    }
  }

  const severityInfo = getSeverityInfo(vulnerability.severity)

  return (
    <Dialog open={isOpen} onOpenChange={(open) => !open && onClose()}>
      <DialogContent className="bg-gray-900 border-gray-800 text-gray-100 max-w-2xl">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            {severityInfo.icon}
            <span>{primaryVuln.title || `${vulnerability.severity} Vulnerability in ${packageName}`}</span>
          </DialogTitle>
          <DialogDescription className="text-gray-400">
            Package: {packageName} (Current: {currentVersion}, Latest: {latestVersion})
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4">
          <div className="flex items-center gap-2">
            <Badge className={`${severityInfo.bgColor} ${severityInfo.color}`}>
              {vulnerability.severity.toUpperCase()}
            </Badge>
            {vulnerability.fixAvailable && <Badge className="bg-green-900/20 text-green-400">Fix Available</Badge>}
            {primaryVuln.cvss && <Badge className="bg-gray-800 text-gray-300">CVSS: {primaryVuln.cvss.score}</Badge>}
          </div>

          {primaryVuln.url && (
            <div>
              <h4 className="text-sm font-medium mb-1">Advisory URL:</h4>
              <a
                href={primaryVuln.url}
                target="_blank"
                rel="noopener noreferrer"
                className="text-blue-400 hover:underline break-all"
              >
                {primaryVuln.url}
              </a>
            </div>
          )}

          {primaryVuln.cwe && primaryVuln.cwe.length > 0 && (
            <div>
              <h4 className="text-sm font-medium mb-1">CWE:</h4>
              <div className="flex flex-wrap gap-1">
                {primaryVuln.cwe.map((cwe: string) => (
                  <Badge key={cwe} variant="outline" className="border-gray-700">
                    {cwe}
                  </Badge>
                ))}
              </div>
            </div>
          )}

          {vulnerability.range && (
            <div>
              <h4 className="text-sm font-medium mb-1">Vulnerable Versions:</h4>
              <code className="bg-gray-800 px-2 py-1 rounded text-sm">{vulnerability.range}</code>
            </div>
          )}

          {vulnerability.fixAvailable && (
            <div className="bg-green-900/10 border border-green-900/30 rounded-md p-3">
              <div className="flex items-start">
                <CheckCircle className="h-5 w-5 text-green-500 mr-2 mt-0.5" />
                <div>
                  <h4 className="text-sm font-medium text-green-400">Fix Available</h4>
                  <p className="text-sm text-gray-400">
                    Update to version {vulnerability.fixAvailable.version} to resolve this vulnerability.
                  </p>
                </div>
              </div>
            </div>
          )}

          {vulnerability.nodes && vulnerability.nodes.length > 0 && (
            <div>
              <h4 className="text-sm font-medium mb-1">Affected Paths:</h4>
              <div className="bg-gray-800 p-2 rounded-md max-h-32 overflow-y-auto">
                <ul className="text-sm">
                  {vulnerability.nodes.map((node: string) => (
                    <li key={node} className="font-mono text-gray-400">
                      {node}
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          )}
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={onClose} className="border-gray-700">
            Close
          </Button>
          {vulnerability.fixAvailable && <Button>Update to {vulnerability.fixAvailable.version}</Button>}
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}
